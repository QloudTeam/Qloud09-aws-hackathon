AWSTemplateFormatVersion: '2010-09-09'
Description: 'ASEV - 앱 혁신가: 서버리스 API 플랫폼'

Parameters:
  ApiName:
    Type: String
    Default: ASEV-ServerlessAPI
    Description: API Gateway 이름

Resources:
  # DynamoDB 테이블
  UserTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${ApiName}-Users'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
      KeySchema:
        - AttributeName: userId
          KeyType: HASH
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      Tags:
        - Key: Name
          Value: ASEV-UserTable

  # S3 버킷 (파일 저장용)
  DataBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'asev-data-${AWS::AccountId}-${AWS::Region}'
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  # Cognito User Pool
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub '${ApiName}-UserPool'
      AutoVerifiedAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireUppercase: true
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: false
      Schema:
        - Name: email
          AttributeDataType: String
          Required: true
          Mutable: true

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref UserPool
      ClientName: !Sub '${ApiName}-Client'
      GenerateSecret: false
      ExplicitAuthFlows:
        - ADMIN_NO_SRP_AUTH
        - USER_PASSWORD_AUTH

  # Lambda 실행 역할
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ApiName}-LambdaRole'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource: !GetAtt UserTable.Arn
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                Resource: !Sub '${DataBucket}/*'
        - PolicyName: SQSSNSAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                  - sns:Publish
                Resource:
                  - !Ref NotificationQueue
                  - !Ref NotificationTopic

  # Lambda 함수들
  AuthFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${ApiName}-AuthFunction'
      Runtime: python3.9
      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import json
          import boto3
          
          def lambda_handler(event, context):
              # 인증 로직 구현
              print(f"Auth request: {json.dumps(event)}")
              
              return {
                  'statusCode': 200,
                  'headers': {
                      'Access-Control-Allow-Origin': '*',
                      'Access-Control-Allow-Headers': 'Content-Type,Authorization',
                      'Access-Control-Allow-Methods': 'GET,POST,PUT,DELETE,OPTIONS'
                  },
                  'body': json.dumps({
                      'message': 'Authentication successful',
                      'userId': 'user123'
                  })
              }
      Environment:
        Variables:
          USER_POOL_ID: !Ref UserPool
          USER_POOL_CLIENT_ID: !Ref UserPoolClient

  APIFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${ApiName}-APIFunction'
      Runtime: python3.9
      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import json
          import boto3
          import uuid
          from datetime import datetime
          
          dynamodb = boto3.resource('dynamodb')
          s3 = boto3.client('s3')
          sqs = boto3.client('sqs')
          
          def lambda_handler(event, context):
              print(f"API request: {json.dumps(event)}")
              
              method = event.get('httpMethod', 'GET')
              path = event.get('path', '/')
              
              if method == 'POST' and path == '/users':
                  return create_user(event)
              elif method == 'GET' and path.startswith('/users/'):
                  return get_user(event)
              else:
                  return {
                      'statusCode': 404,
                      'headers': {
                          'Access-Control-Allow-Origin': '*'
                      },
                      'body': json.dumps({'error': 'Not found'})
                  }
          
          def create_user(event):
              try:
                  body = json.loads(event.get('body', '{}'))
                  user_id = str(uuid.uuid4())
                  
                  table = dynamodb.Table(os.environ['USER_TABLE'])
                  table.put_item(
                      Item={
                          'userId': user_id,
                          'name': body.get('name', ''),
                          'email': body.get('email', ''),
                          'createdAt': datetime.utcnow().isoformat()
                      }
                  )
                  
                  # SQS로 메시지 전송
                  sqs.send_message(
                      QueueUrl=os.environ['QUEUE_URL'],
                      MessageBody=json.dumps({
                          'action': 'user_created',
                          'userId': user_id
                      })
                  )
                  
                  return {
                      'statusCode': 201,
                      'headers': {
                          'Access-Control-Allow-Origin': '*'
                      },
                      'body': json.dumps({
                          'userId': user_id,
                          'message': 'User created successfully'
                      })
                  }
              except Exception as e:
                  return {
                      'statusCode': 500,
                      'headers': {
                          'Access-Control-Allow-Origin': '*'
                      },
                      'body': json.dumps({'error': str(e)})
                  }
          
          def get_user(event):
              try:
                  user_id = event['pathParameters']['userId']
                  
                  table = dynamodb.Table(os.environ['USER_TABLE'])
                  response = table.get_item(Key={'userId': user_id})
                  
                  if 'Item' in response:
                      return {
                          'statusCode': 200,
                          'headers': {
                              'Access-Control-Allow-Origin': '*'
                          },
                          'body': json.dumps(response['Item'])
                      }
                  else:
                      return {
                          'statusCode': 404,
                          'headers': {
                              'Access-Control-Allow-Origin': '*'
                          },
                          'body': json.dumps({'error': 'User not found'})
                      }
              except Exception as e:
                  return {
                      'statusCode': 500,
                      'headers': {
                          'Access-Control-Allow-Origin': '*'
                      },
                      'body': json.dumps({'error': str(e)})
                  }
      Environment:
        Variables:
          USER_TABLE: !Ref UserTable
          DATA_BUCKET: !Ref DataBucket
          QUEUE_URL: !Ref NotificationQueue

  ProcessFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${ApiName}-ProcessFunction'
      Runtime: python3.9
      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import json
          import boto3
          
          sns = boto3.client('sns')
          
          def lambda_handler(event, context):
              print(f"Process request: {json.dumps(event)}")
              
              for record in event.get('Records', []):
                  body = json.loads(record['body'])
                  
                  # SNS로 알림 전송
                  sns.publish(
                      TopicArn=os.environ['TOPIC_ARN'],
                      Message=json.dumps({
                          'action': body.get('action'),
                          'userId': body.get('userId'),
                          'timestamp': record.get('timestamp')
                      }),
                      Subject='ASEV API Notification'
                  )
              
              return {'statusCode': 200}
      Environment:
        Variables:
          TOPIC_ARN: !Ref NotificationTopic

  # SQS Queue
  NotificationQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub '${ApiName}-NotificationQueue'
      VisibilityTimeoutSeconds: 60
      MessageRetentionPeriod: 1209600  # 14 days

  # SQS Event Source Mapping
  QueueEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      EventSourceArn: !GetAtt NotificationQueue.Arn
      FunctionName: !Ref ProcessFunction
      BatchSize: 10

  # SNS Topic
  NotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub '${ApiName}-Notifications'
      DisplayName: ASEV API Notifications

  # API Gateway
  RestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Ref ApiName
      Description: ASEV 서버리스 API
      EndpointConfiguration:
        Types:
          - REGIONAL

  # API Gateway Authorizer
  CognitoAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      Name: CognitoAuthorizer
      Type: COGNITO_USER_POOLS
      IdentitySource: method.request.header.Authorization
      RestApiId: !Ref RestApi
      ProviderARNs:
        - !GetAtt UserPool.Arn

  # API Gateway Resources
  UsersResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestApi
      ParentId: !GetAtt RestApi.RootResourceId
      PathPart: users

  UserResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestApi
      ParentId: !Ref UsersResource
      PathPart: '{userId}'

  # API Gateway Methods
  UsersPostMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref UsersResource
      HttpMethod: POST
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref CognitoAuthorizer
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIFunction.Arn}/invocations'

  UserGetMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref UserResource
      HttpMethod: GET
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref CognitoAuthorizer
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIFunction.Arn}/invocations'

  # Lambda Permissions
  AuthFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref AuthFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/*'

  APIFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref APIFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/*'

  # API Gateway Deployment
  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - UsersPostMethod
      - UserGetMethod
    Properties:
      RestApiId: !Ref RestApi
      StageName: prod

Outputs:
  ApiEndpoint:
    Description: API Gateway endpoint URL
    Value: !Sub 'https://${RestApi}.execute-api.${AWS::Region}.amazonaws.com/prod'
    Export:
      Name: !Sub '${AWS::StackName}-ApiEndpoint'

  UserPoolId:
    Description: Cognito User Pool ID
    Value: !Ref UserPool
    Export:
      Name: !Sub '${AWS::StackName}-UserPoolId'

  UserPoolClientId:
    Description: Cognito User Pool Client ID
    Value: !Ref UserPoolClient
    Export:
      Name: !Sub '${AWS::StackName}-UserPoolClientId'

  DynamoDBTable:
    Description: DynamoDB Table Name
    Value: !Ref UserTable
    Export:
      Name: !Sub '${AWS::StackName}-UserTable'

  S3Bucket:
    Description: S3 Data Bucket
    Value: !Ref DataBucket
    Export:
      Name: !Sub '${AWS::StackName}-DataBucket'