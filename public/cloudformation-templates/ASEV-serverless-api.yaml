AWSTemplateFormatVersion: '2010-09-09'
Description: 'ASEV - 앱 혁신가 아키텍처: 서버리스 API 플랫폼'

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues: [dev, staging, prod]

Resources:
  # DynamoDB Table
  UserTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${Environment}-asev-users'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
        - AttributeName: email
          AttributeType: S
      KeySchema:
        - AttributeName: userId
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: email-index
          KeySchema:
            - AttributeName: email
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-asev-users-table'

  # IAM Role for Lambda
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${Environment}-asev-lambda-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource:
                  - !GetAtt UserTable.Arn
                  - !Sub '${UserTable.Arn}/index/*'

  # Lambda Functions
  AuthFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${Environment}-asev-auth'
      Runtime: nodejs20.x
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 30
      MemorySize: 256
      Environment:
        Variables:
          TABLE_NAME: !Ref UserTable
          ENVIRONMENT: !Ref Environment
      Code:
        ZipFile: |
          const AWS = require('aws-sdk');
          const dynamodb = new AWS.DynamoDB.DocumentClient();
          
          exports.handler = async (event) => {
            console.log('인증 요청:', JSON.stringify(event, null, 2));
            
            try {
              const { email, password } = JSON.parse(event.body || '{}');
              
              if (!email || !password) {
                return {
                  statusCode: 400,
                  headers: {
                    'Content-Type': 'application/json',
                    'Access-Control-Allow-Origin': '*'
                  },
                  body: JSON.stringify({ error: '이메일과 비밀번호가 필요합니다.' })
                };
              }
              
              // 간단한 인증 로직 (실제 환경에서는 보안 강화 필요)
              const params = {
                TableName: process.env.TABLE_NAME,
                IndexName: 'email-index',
                KeyConditionExpression: 'email = :email',
                ExpressionAttributeValues: {
                  ':email': email
                }
              };
              
              const result = await dynamodb.query(params).promise();
              
              return {
                statusCode: 200,
                headers: {
                  'Content-Type': 'application/json',
                  'Access-Control-Allow-Origin': '*'
                },
                body: JSON.stringify({
                  success: true,
                  message: '인증 성공',
                  userExists: result.Items.length > 0
                })
              };
              
            } catch (error) {
              console.error('인증 오류:', error);
              return {
                statusCode: 500,
                headers: {
                  'Content-Type': 'application/json',
                  'Access-Control-Allow-Origin': '*'
                },
                body: JSON.stringify({ error: '서버 오류가 발생했습니다.' })
              };
            }
          };

  ApiFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${Environment}-asev-api'
      Runtime: nodejs20.x
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 30
      MemorySize: 256
      Environment:
        Variables:
          TABLE_NAME: !Ref UserTable
          ENVIRONMENT: !Ref Environment
      Code:
        ZipFile: |
          const AWS = require('aws-sdk');
          const dynamodb = new AWS.DynamoDB.DocumentClient();
          const { v4: uuidv4 } = require('uuid');
          
          exports.handler = async (event) => {
            console.log('API 요청:', JSON.stringify(event, null, 2));
            
            try {
              const method = event.httpMethod;
              const path = event.path;
              
              if (method === 'GET' && path === '/users') {
                // 사용자 목록 조회
                const params = {
                  TableName: process.env.TABLE_NAME,
                  Limit: 10
                };
                
                const result = await dynamodb.scan(params).promise();
                
                return {
                  statusCode: 200,
                  headers: {
                    'Content-Type': 'application/json',
                    'Access-Control-Allow-Origin': '*'
                  },
                  body: JSON.stringify({
                    users: result.Items,
                    count: result.Count
                  })
                };
              }
              
              if (method === 'POST' && path === '/users') {
                // 새 사용자 생성
                const { name, email } = JSON.parse(event.body || '{}');
                
                const params = {
                  TableName: process.env.TABLE_NAME,
                  Item: {
                    userId: uuidv4(),
                    name,
                    email,
                    createdAt: new Date().toISOString()
                  }
                };
                
                await dynamodb.put(params).promise();
                
                return {
                  statusCode: 201,
                  headers: {
                    'Content-Type': 'application/json',
                    'Access-Control-Allow-Origin': '*'
                  },
                  body: JSON.stringify({
                    success: true,
                    message: '사용자가 생성되었습니다.',
                    user: params.Item
                  })
                };
              }
              
              return {
                statusCode: 404,
                headers: {
                  'Content-Type': 'application/json',
                  'Access-Control-Allow-Origin': '*'
                },
                body: JSON.stringify({ error: '경로를 찾을 수 없습니다.' })
              };
              
            } catch (error) {
              console.error('API 오류:', error);
              return {
                statusCode: 500,
                headers: {
                  'Content-Type': 'application/json',
                  'Access-Control-Allow-Origin': '*'
                },
                body: JSON.stringify({ error: '서버 오류가 발생했습니다.' })
              };
            }
          };

  DataProcessingFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${Environment}-asev-data-processing'
      Runtime: nodejs20.x
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 60
      MemorySize: 512
      Environment:
        Variables:
          TABLE_NAME: !Ref UserTable
          ENVIRONMENT: !Ref Environment
      Code:
        ZipFile: |
          const AWS = require('aws-sdk');
          const dynamodb = new AWS.DynamoDB.DocumentClient();
          
          exports.handler = async (event) => {
            console.log('데이터 처리 요청:', JSON.stringify(event, null, 2));
            
            try {
              // DynamoDB Streams에서 트리거된 이벤트 처리
              for (const record of event.Records || []) {
                if (record.eventName === 'INSERT') {
                  const newUser = record.dynamodb.NewImage;
                  console.log('새 사용자 등록:', newUser);
                  
                  // 여기서 추가 데이터 처리 로직 구현
                  // 예: 이메일 발송, 분석 데이터 생성 등
                }
              }
              
              return {
                statusCode: 200,
                body: JSON.stringify({ message: '데이터 처리 완료' })
              };
              
            } catch (error) {
              console.error('데이터 처리 오류:', error);
              throw error;
            }
          };

  # API Gateway
  RestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub '${Environment}-asev-api'
      Description: ASEV 앱 혁신가 RESTful API
      EndpointConfiguration:
        Types:
          - REGIONAL

  # API Gateway Resources
  UsersResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestApi
      ParentId: !GetAtt RestApi.RootResourceId
      PathPart: users

  AuthResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestApi
      ParentId: !GetAtt RestApi.RootResourceId
      PathPart: auth

  # API Gateway Methods
  UsersGetMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref UsersResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ApiFunction.Arn}/invocations'

  UsersPostMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref UsersResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ApiFunction.Arn}/invocations'

  AuthPostMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref AuthResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AuthFunction.Arn}/invocations'

  # API Gateway Deployment
  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - UsersGetMethod
      - UsersPostMethod
      - AuthPostMethod
    Properties:
      RestApiId: !Ref RestApi
      StageName: !Ref Environment

  # Lambda Permissions
  AuthFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref AuthFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/*'

  ApiFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ApiFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/*'

  # DynamoDB Stream Event Source Mapping
  DataProcessingEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      EventSourceArn: !GetAtt UserTable.StreamArn
      FunctionName: !Ref DataProcessingFunction
      StartingPosition: LATEST
      MaximumBatchingWindowInSeconds: 5

Outputs:
  ApiGatewayUrl:
    Description: API Gateway URL
    Value: !Sub 'https://${RestApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}'
    Export:
      Name: !Sub '${AWS::StackName}-ApiGatewayUrl'

  DynamoDBTableName:
    Description: DynamoDB Table Name
    Value: !Ref UserTable
    Export:
      Name: !Sub '${AWS::StackName}-DynamoDBTableName'

  AuthFunctionArn:
    Description: Auth Lambda Function ARN
    Value: !GetAtt AuthFunction.Arn
    Export:
      Name: !Sub '${AWS::StackName}-AuthFunctionArn'

  ApiFunctionArn:
    Description: API Lambda Function ARN
    Value: !GetAtt ApiFunction.Arn
    Export:
      Name: !Sub '${AWS::StackName}-ApiFunctionArn'