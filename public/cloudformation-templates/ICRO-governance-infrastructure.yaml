AWSTemplateFormatVersion: '2010-09-09'
Description: 'ICRO - 거버넌스 인프라: 인프라 중심의 제어형 안정적 운영자를 위한 거버넌스 및 컴플라이언스 시스템'

Parameters:
  ProjectName:
    Type: String
    Default: icro-governance
    Description: 프로젝트 이름

Resources:
  # S3 버킷 - Config 저장소
  ConfigBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${ProjectName}-config-${AWS::AccountId}'
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldVersions
            Status: Enabled
            NoncurrentVersionExpirationInDays: 90

  # S3 버킷 - CloudTrail 로그
  CloudTrailBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${ProjectName}-cloudtrail-${AWS::AccountId}'
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  # CloudTrail 버킷 정책
  CloudTrailBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref CloudTrailBucket
      PolicyDocument:
        Statement:
          - Sid: AWSCloudTrailAclCheck
            Effect: Allow
            Principal:
              Service: cloudtrail.amazonaws.com
            Action: s3:GetBucketAcl
            Resource: !Sub '${CloudTrailBucket}'
          - Sid: AWSCloudTrailWrite
            Effect: Allow
            Principal:
              Service: cloudtrail.amazonaws.com
            Action: s3:PutObject
            Resource: !Sub '${CloudTrailBucket}/*'
            Condition:
              StringEquals:
                's3:x-amz-acl': bucket-owner-full-control

  # AWS Config Configuration Recorder
  ConfigurationRecorder:
    Type: AWS::Config::ConfigurationRecorder
    Properties:
      Name: !Sub '${ProjectName}-config-recorder'
      RoleARN: !GetAtt ConfigRole.Arn
      RecordingGroup:
        AllSupported: true
        IncludeGlobalResourceTypes: true

  # AWS Config Delivery Channel
  DeliveryChannel:
    Type: AWS::Config::DeliveryChannel
    Properties:
      Name: !Sub '${ProjectName}-delivery-channel'
      S3BucketName: !Ref ConfigBucket
      ConfigSnapshotDeliveryProperties:
        DeliveryFrequency: Daily

  # CloudTrail
  CloudTrail:
    Type: AWS::CloudTrail::Trail
    DependsOn: CloudTrailBucketPolicy
    Properties:
      TrailName: !Sub '${ProjectName}-cloudtrail'
      S3BucketName: !Ref CloudTrailBucket
      IncludeGlobalServiceEvents: true
      IsMultiRegionTrail: true
      EnableLogFileValidation: true
      EventSelectors:
        - ReadWriteType: All
          IncludeManagementEvents: true
          DataResources:
            - Type: AWS::S3::Object
              Values:
                - 'arn:aws:s3:::*/*'

  # Config Rules
  S3BucketPublicAccessProhibitedRule:
    Type: AWS::Config::ConfigRule
    DependsOn: ConfigurationRecorder
    Properties:
      ConfigRuleName: s3-bucket-public-access-prohibited
      Description: 'S3 버킷의 퍼블릭 액세스가 금지되어 있는지 확인'
      Source:
        Owner: AWS
        SourceIdentifier: S3_BUCKET_PUBLIC_ACCESS_PROHIBITED

  RootAccessKeyCheckRule:
    Type: AWS::Config::ConfigRule
    DependsOn: ConfigurationRecorder
    Properties:
      ConfigRuleName: root-access-key-check
      Description: 'Root 사용자에게 액세스 키가 있는지 확인'
      Source:
        Owner: AWS
        SourceIdentifier: ROOT_ACCESS_KEY_CHECK

  EC2SecurityGroupAttachedToENIRule:
    Type: AWS::Config::ConfigRule
    DependsOn: ConfigurationRecorder
    Properties:
      ConfigRuleName: ec2-security-group-attached-to-eni
      Description: 'EC2 보안 그룹이 ENI에 연결되어 있는지 확인'
      Source:
        Owner: AWS
        SourceIdentifier: EC2_SECURITY_GROUP_ATTACHED_TO_ENI

  # IAM 역할 - Config
  ConfigRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: config.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/ConfigRole
      Policies:
        - PolicyName: ConfigBucketAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetBucketAcl
                  - s3:ListBucket
                Resource: !Sub '${ConfigBucket}'
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                Resource: !Sub '${ConfigBucket}/*'

  # Systems Manager - 컴플라이언스 문서
  ComplianceDocument:
    Type: AWS::SSM::Document
    Properties:
      DocumentType: Command
      Name: !Sub '${ProjectName}-compliance-check'
      Content:
        schemaVersion: '2.2'
        description: '시스템 컴플라이언스 검사'
        parameters:
          commands:
            type: StringList
            description: '실행할 명령어들'
            default:
              - 'echo "컴플라이언스 검사 시작"'
              - 'yum list installed | grep -i security'
              - 'systemctl status sshd'
              - 'cat /etc/ssh/sshd_config | grep -E "PermitRootLogin|PasswordAuthentication"'
        mainSteps:
          - action: aws:runShellScript
            name: runComplianceCheck
            inputs:
              runCommand: '{{ commands }}'

  # EventBridge 규칙 - Config 규칙 위반
  ConfigRuleComplianceChangeRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub '${ProjectName}-config-compliance-change'
      Description: 'Config 규칙 컴플라이언스 변경 시 알림'
      EventPattern:
        source:
          - aws.config
        detail-type:
          - Config Rules Compliance Change
        detail:
          newEvaluationResult:
            complianceType:
              - NON_COMPLIANT
      State: ENABLED
      Targets:
        - Arn: !Ref ComplianceTopic
          Id: ComplianceTopicTarget

  # EventBridge 규칙 - CloudTrail 이벤트
  SecurityEventRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub '${ProjectName}-security-events'
      Description: '보안 관련 이벤트 모니터링'
      EventPattern:
        source:
          - aws.iam
        detail-type:
          - AWS API Call via CloudTrail
        detail:
          eventName:
            - CreateUser
            - DeleteUser
            - AttachUserPolicy
            - DetachUserPolicy
            - CreateRole
            - DeleteRole
      State: ENABLED
      Targets:
        - Arn: !Ref SecurityTopic
          Id: SecurityTopicTarget

  # SNS 토픽들
  ComplianceTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub '${ProjectName}-compliance-alerts'
      DisplayName: '컴플라이언스 알림'

  SecurityTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub '${ProjectName}-security-alerts'
      DisplayName: '보안 알림'

  # Lambda 함수 - 컴플라이언스 리포트
  ComplianceReportFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${ProjectName}-compliance-report'
      Runtime: python3.9
      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import json
          import boto3
          from datetime import datetime, timedelta
          
          def lambda_handler(event, context):
              config_client = boto3.client('config')
              
              # Config 규칙 컴플라이언스 상태 조회
              response = config_client.describe_compliance_by_config_rule()
              
              compliant_rules = []
              non_compliant_rules = []
              
              for rule in response['ComplianceByConfigRules']:
                  rule_name = rule['ConfigRuleName']
                  compliance = rule['Compliance']['ComplianceType']
                  
                  if compliance == 'COMPLIANT':
                      compliant_rules.append(rule_name)
                  elif compliance == 'NON_COMPLIANT':
                      non_compliant_rules.append(rule_name)
              
              # 리포트 생성
              report = {
                  'timestamp': datetime.now().isoformat(),
                  'total_rules': len(compliant_rules) + len(non_compliant_rules),
                  'compliant_rules': len(compliant_rules),
                  'non_compliant_rules': len(non_compliant_rules),
                  'compliance_rate': len(compliant_rules) / (len(compliant_rules) + len(non_compliant_rules)) * 100 if (len(compliant_rules) + len(non_compliant_rules)) > 0 else 0,
                  'non_compliant_rule_names': non_compliant_rules
              }
              
              # CloudWatch 메트릭 전송
              cloudwatch = boto3.client('cloudwatch')
              cloudwatch.put_metric_data(
                  Namespace='ICRO/Governance',
                  MetricData=[
                      {
                          'MetricName': 'ComplianceRate',
                          'Value': report['compliance_rate'],
                          'Unit': 'Percent'
                      },
                      {
                          'MetricName': 'NonCompliantRules',
                          'Value': len(non_compliant_rules),
                          'Unit': 'Count'
                      }
                  ]
              )
              
              return {
                  'statusCode': 200,
                  'body': json.dumps(report, indent=2)
              }

  # Lambda 실행 역할
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: ConfigAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - config:DescribeComplianceByConfigRule
                  - config:GetComplianceDetailsByConfigRule
                  - cloudwatch:PutMetricData
                Resource: '*'

  # EventBridge 규칙 - 정기적 컴플라이언스 리포트
  ComplianceReportSchedule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub '${ProjectName}-compliance-report-schedule'
      Description: '매일 컴플라이언스 리포트 생성'
      ScheduleExpression: 'cron(0 9 * * ? *)'  # 매일 오전 9시
      State: ENABLED
      Targets:
        - Arn: !GetAtt ComplianceReportFunction.Arn
          Id: ComplianceReportTarget

  # Lambda 권한 - EventBridge
  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ComplianceReportFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt ComplianceReportSchedule.Arn

  # CloudWatch 대시보드
  GovernanceDashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName: !Sub '${ProjectName}-governance-dashboard'
      DashboardBody: !Sub |
        {
          "widgets": [
            {
              "type": "metric",
              "x": 0,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "ICRO/Governance", "ComplianceRate" ],
                  [ ".", "NonCompliantRules" ]
                ],
                "period": 86400,
                "stat": "Average",
                "region": "${AWS::Region}",
                "title": "컴플라이언스 메트릭"
              }
            },
            {
              "type": "log",
              "x": 12,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "query": "SOURCE '/aws/lambda/${ComplianceReportFunction}'\n| fields @timestamp, @message\n| sort @timestamp desc\n| limit 20",
                "region": "${AWS::Region}",
                "title": "최근 컴플라이언스 리포트"
              }
            }
          ]
        }

  # IAM 정책 - 최소 권한 원칙 예시
  RestrictedUserPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub '${ProjectName}-restricted-user-policy'
      Description: '제한된 사용자 권한 정책'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - ec2:DescribeInstances
              - ec2:DescribeImages
              - ec2:DescribeSecurityGroups
              - s3:ListBucket
              - s3:GetObject
            Resource: '*'
          - Effect: Deny
            Action:
              - ec2:TerminateInstances
              - s3:DeleteBucket
              - iam:*
            Resource: '*'

  # Systems Manager Parameter - 거버넌스 설정
  GovernanceConfig:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '/${ProjectName}/governance/config'
      Type: String
      Value: |
        {
          "compliance_check_frequency": "daily",
          "security_monitoring": true,
          "audit_log_retention": 90,
          "encryption_required": true,
          "mfa_required": true
        }
      Description: '거버넌스 시스템 설정'

Outputs:
  ConfigBucketName:
    Description: 'AWS Config 버킷 이름'
    Value: !Ref ConfigBucket
  
  CloudTrailBucketName:
    Description: 'CloudTrail 로그 버킷 이름'
    Value: !Ref CloudTrailBucket
  
  ComplianceTopicArn:
    Description: '컴플라이언스 알림 SNS 토픽 ARN'
    Value: !Ref ComplianceTopic
  
  SecurityTopicArn:
    Description: '보안 알림 SNS 토픽 ARN'
    Value: !Ref SecurityTopic
  
  DashboardURL:
    Description: 'CloudWatch 거버넌스 대시보드 URL'
    Value: !Sub 'https://console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#dashboards:name=${ProjectName}-governance-dashboard'