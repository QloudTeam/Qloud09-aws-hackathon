AWSTemplateFormatVersion: '2010-09-09'
Description: 'ACEO - 딜리버리 엔지니어: EC2 + RDS + API Gateway 배포 시스템'

Parameters:
  KeyPairName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: EC2 키페어

Resources:
  # VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: ACEO-VPC

  # Public Subnet
  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: ACEO-Public-Subnet

  # Private Subnets for RDS
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: Name
          Value: ACEO-Private-Subnet-1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: !Select [1, !GetAZs '']
      Tags:
        - Key: Name
          Value: ACEO-Private-Subnet-2

  # Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: ACEO-IGW

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # Route Table
  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: ACEO-RouteTable

  Route:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  SubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref RouteTable

  # Security Groups
  ApplicationSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Application Server Security Group
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: ACEO-App-SG

  DatabaseSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Database Security Group
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref ApplicationSecurityGroup
      Tags:
        - Key: Name
          Value: ACEO-DB-SG

  # RDS Subnet Group
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: ACEO Database Subnet Group
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      Tags:
        - Key: Name
          Value: ACEO-DB-SubnetGroup

  # Database Secret
  DBSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: ACEO-DB-Secret
      Description: RDS database credentials
      GenerateSecretString:
        SecretStringTemplate: '{"username": "admin"}'
        GenerateStringKey: 'password'
        PasswordLength: 16
        ExcludeCharacters: '"@/\'

  # RDS Instance
  RDSInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: aceo-database
      DBInstanceClass: db.t3.micro
      Engine: mysql
      EngineVersion: 8.0.35
      MasterUsername: admin
      MasterUserPassword: !Sub '{{resolve:secretsmanager:${DBSecret}:SecretString:password}}'
      AllocatedStorage: 20
      StorageType: gp2
      VPCSecurityGroups:
        - !Ref DatabaseSecurityGroup
      DBSubnetGroupName: !Ref DBSubnetGroup
      BackupRetentionPeriod: 7
      MultiAZ: false
      PubliclyAccessible: false
      DeletionProtection: false
      Tags:
        - Key: Name
          Value: ACEO-RDS

  # IAM Role for Application Server
  ApplicationRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'ACEO-ApplicationRole-${AWS::StackName}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Policies:
        - PolicyName: DatabaseAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - rds:DescribeDBInstances
                  - secretsmanager:GetSecretValue
                Resource: '*'
        - PolicyName: APIGatewayAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - execute-api:Invoke
                Resource: '*'

  ApplicationInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref ApplicationRole

  # Application Server
  ApplicationServer:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0c02fb55956c7d316
      InstanceType: t3.micro
      KeyName: !Ref KeyPairName
      SubnetId: !Ref PublicSubnet
      SecurityGroupIds:
        - !Ref ApplicationSecurityGroup
      IamInstanceProfile: !Ref ApplicationInstanceProfile
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          yum install -y nodejs npm git httpd mysql
          
          # Node.js 애플리케이션 설정
          mkdir -p /opt/aceo-app
          cd /opt/aceo-app
          
          # package.json 생성
          cat > package.json << 'EOF'
          {
            "name": "aceo-delivery-app",
            "version": "1.0.0",
            "description": "ACEO Delivery Engineer Application",
            "main": "app.js",
            "scripts": {
              "start": "node app.js",
              "dev": "nodemon app.js"
            },
            "dependencies": {
              "express": "^4.18.0",
              "mysql2": "^3.6.0",
              "aws-sdk": "^2.1000.0",
              "cors": "^2.8.5",
              "helmet": "^7.0.0"
            }
          }
          EOF
          
          # 애플리케이션 코드 생성
          cat > app.js << 'EOF'
          const express = require('express');
          const mysql = require('mysql2/promise');
          const AWS = require('aws-sdk');
          const cors = require('cors');
          const helmet = require('helmet');
          
          const app = express();
          const port = 3000;
          
          app.use(helmet());
          app.use(cors());
          app.use(express.json());
          
          // AWS 설정
          const secretsManager = new AWS.SecretsManager();
          
          // 데이터베이스 연결 설정
          let dbConfig = null;
          
          async function getDBConfig() {
            if (!dbConfig) {
              try {
                const secret = await secretsManager.getSecretValue({
                  SecretId: '${DBSecret}'
                }).promise();
                
                const credentials = JSON.parse(secret.SecretString);
                dbConfig = {
                  host: '${RDSInstance.Endpoint.Address}',
                  user: credentials.username,
                  password: credentials.password,
                  database: 'aceo_db'
                };
              } catch (error) {
                console.error('Error getting DB config:', error);
                dbConfig = {
                  host: '${RDSInstance.Endpoint.Address}',
                  user: 'admin',
                  password: 'fallback_password',
                  database: 'aceo_db'
                };
              }
            }
            return dbConfig;
          }
          
          // Health check endpoint
          app.get('/health', (req, res) => {
            res.json({ 
              status: 'OK', 
              timestamp: new Date().toISOString(),
              service: 'ACEO Delivery Service'
            });
          });
          
          // API endpoints
          app.get('/api/deployments', async (req, res) => {
            try {
              const config = await getDBConfig();
              const connection = await mysql.createConnection(config);
              
              const [rows] = await connection.execute(
                'SELECT * FROM deployments ORDER BY created_at DESC LIMIT 10'
              );
              
              await connection.end();
              res.json(rows);
            } catch (error) {
              console.error('Database error:', error);
              res.status(500).json({ error: 'Database connection failed' });
            }
          });
          
          app.post('/api/deployments', async (req, res) => {
            try {
              const { application, version, environment } = req.body;
              const config = await getDBConfig();
              const connection = await mysql.createConnection(config);
              
              const [result] = await connection.execute(
                'INSERT INTO deployments (application, version, environment, status, created_at) VALUES (?, ?, ?, ?, NOW())',
                [application, version, environment, 'pending']
              );
              
              await connection.end();
              res.json({ 
                id: result.insertId, 
                message: 'Deployment initiated',
                application,
                version,
                environment
              });
            } catch (error) {
              console.error('Deployment error:', error);
              res.status(500).json({ error: 'Deployment failed' });
            }
          });
          
          // 서버 시작
          app.listen(port, () => {
            console.log(`ACEO Delivery Service running on port ${port}`);
          });
          EOF
          
          # 의존성 설치
          npm install
          
          # PM2로 프로세스 관리
          npm install -g pm2
          pm2 start app.js --name aceo-delivery
          pm2 startup
          pm2 save
          
          # Apache 설정
          systemctl start httpd
          systemctl enable httpd
          
          cat > /etc/httpd/conf.d/aceo.conf << 'EOF'
          <VirtualHost *:80>
              ProxyPreserveHost On
              ProxyRequests Off
              
              ProxyPass /api/ http://localhost:3000/api/
              ProxyPassReverse /api/ http://localhost:3000/api/
              
              ProxyPass /health http://localhost:3000/health
              ProxyPassReverse /health http://localhost:3000/health
              
              DocumentRoot /var/www/html
          </VirtualHost>
          EOF
          
          systemctl restart httpd
          
          # 기본 웹 페이지
          cat > /var/www/html/index.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head>
              <title>ACEO Delivery Engineer</title>
              <style>
                  body { font-family: Arial, sans-serif; margin: 40px; }
                  .container { max-width: 800px; margin: 0 auto; }
                  .endpoint { background: #f0f0f0; padding: 15px; margin: 10px 0; border-radius: 5px; }
              </style>
          </head>
          <body>
              <div class="container">
                  <h1>ACEO - 딜리버리 엔지니어</h1>
                  <p>배포 및 딜리버리 관리 시스템</p>
                  
                  <h2>API Endpoints</h2>
                  <div class="endpoint">
                      <strong>GET /health</strong> - 서비스 상태 확인
                  </div>
                  <div class="endpoint">
                      <strong>GET /api/deployments</strong> - 배포 목록 조회
                  </div>
                  <div class="endpoint">
                      <strong>POST /api/deployments</strong> - 새 배포 생성
                  </div>
              </div>
          </body>
          </html>
          EOF
      Tags:
        - Key: Name
          Value: ACEO-Application-Server

  # API Gateway
  RestAPI:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: ACEO-DeliveryAPI
      Description: ACEO Delivery Engineer API
      EndpointConfiguration:
        Types:
          - REGIONAL

  # API Gateway Resource
  DeploymentsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestAPI
      ParentId: !GetAtt RestAPI.RootResourceId
      PathPart: deployments

  # API Gateway Method
  DeploymentsGetMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestAPI
      ResourceId: !Ref DeploymentsResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: HTTP_PROXY
        IntegrationHttpMethod: GET
        Uri: !Sub 'http://${ApplicationServer.PublicIp}/api/deployments'

  DeploymentsPostMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestAPI
      ResourceId: !Ref DeploymentsResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: HTTP_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'http://${ApplicationServer.PublicIp}/api/deployments'

  # API Gateway Deployment
  APIDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - DeploymentsGetMethod
      - DeploymentsPostMethod
    Properties:
      RestApiId: !Ref RestAPI
      StageName: prod

  # CloudWatch Log Group
  ApplicationLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aceo/application
      RetentionInDays: 14

Outputs:
  ApplicationServerIP:
    Description: Application Server Public IP
    Value: !GetAtt ApplicationServer.PublicIp
    Export:
      Name: !Sub '${AWS::StackName}-AppServerIP'

  RDSEndpoint:
    Description: RDS Database Endpoint
    Value: !GetAtt RDSInstance.Endpoint.Address
    Export:
      Name: !Sub '${AWS::StackName}-RDSEndpoint'

  APIGatewayURL:
    Description: API Gateway URL
    Value: !Sub 'https://${RestAPI}.execute-api.${AWS::Region}.amazonaws.com/prod'
    Export:
      Name: !Sub '${AWS::StackName}-APIURL'

  ApplicationURL:
    Description: Application URL
    Value: !Sub 'http://${ApplicationServer.PublicIp}'
    Export:
      Name: !Sub '${AWS::StackName}-AppURL'

  DatabaseSecret:
    Description: Database Secret ARN
    Value: !Ref DBSecret
    Export:
      Name: !Sub '${AWS::StackName}-DBSecret'