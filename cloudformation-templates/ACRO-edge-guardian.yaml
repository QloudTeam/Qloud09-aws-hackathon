AWSTemplateFormatVersion: '2010-09-09'
Description: 'ACRO - 엣지 수호자: Cognito + WAF + Route 53 엣지 보안 서비스'

Parameters:
  DomainName:
    Type: String
    Default: ""
    Description: 도메인 이름 (선택사항)

Resources:
  # Cognito User Pool
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: ACRO-UserPool
      AutoVerifiedAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireUppercase: true
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
      Schema:
        - Name: email
          AttributeDataType: String
          Required: true
          Mutable: true
        - Name: name
          AttributeDataType: String
          Required: true
          Mutable: true
      UserPoolTags:
        Name: ACRO-UserPool
        Service: EdgeGuardian
      AccountRecoverySetting:
        RecoveryMechanisms:
          - Name: verified_email
            Priority: 1
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
      EmailConfiguration:
        EmailSendingAccount: COGNITO_DEFAULT
      MfaConfiguration: OPTIONAL
      EnabledMfas:
        - SOFTWARE_TOKEN_MFA

  # Cognito User Pool Client
  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref UserPool
      ClientName: ACRO-WebClient
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_USER_SRP_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
      PreventUserExistenceErrors: ENABLED
      SupportedIdentityProviders:
        - COGNITO
      CallbackURLs:
        - https://localhost:3000/callback
        - !If 
          - HasDomainName
          - !Sub 'https://${DomainName}/callback'
          - !Ref AWS::NoValue
      LogoutURLs:
        - https://localhost:3000/logout
        - !If 
          - HasDomainName
          - !Sub 'https://${DomainName}/logout'
          - !Ref AWS::NoValue
      AllowedOAuthFlows:
        - code
        - implicit
      AllowedOAuthScopes:
        - email
        - openid
        - profile
      AllowedOAuthFlowsUserPoolClient: true

  # Cognito Identity Pool
  IdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      IdentityPoolName: ACRO_IdentityPool
      AllowUnauthenticatedIdentities: false
      CognitoIdentityProviders:
        - ClientId: !Ref UserPoolClient
          ProviderName: !GetAtt UserPool.ProviderName

  # IAM Roles for Cognito Identity Pool
  CognitoAuthenticatedRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'ACRO-CognitoAuthenticatedRole-${AWS::StackName}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
            Action: sts:AssumeRoleWithWebIdentity
            Condition:
              StringEquals:
                'cognito-identity.amazonaws.com:aud': !Ref IdentityPool
              'ForAnyValue:StringLike':
                'cognito-identity.amazonaws.com:amr': authenticated
      Policies:
        - PolicyName: CognitoAuthenticatedPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - cognito-sync:*
                  - cognito-identity:*
                Resource: '*'

  CognitoUnauthenticatedRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'ACRO-CognitoUnauthenticatedRole-${AWS::StackName}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
            Action: sts:AssumeRoleWithWebIdentity
            Condition:
              StringEquals:
                'cognito-identity.amazonaws.com:aud': !Ref IdentityPool
              'ForAnyValue:StringLike':
                'cognito-identity.amazonaws.com:amr': unauthenticated
      Policies:
        - PolicyName: CognitoUnauthenticatedPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Deny
                Action: '*'
                Resource: '*'

  # Identity Pool Role Attachment
  IdentityPoolRoleAttachment:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId: !Ref IdentityPool
      Roles:
        authenticated: !GetAtt CognitoAuthenticatedRole.Arn
        unauthenticated: !GetAtt CognitoUnauthenticatedRole.Arn

  # WAF Web ACL for CloudFront
  WebACL:
    Type: AWS::WAFv2::WebACL
    Properties:
      Name: ACRO-EdgeWebACL
      Scope: CLOUDFRONT
      DefaultAction:
        Allow: {}
      Rules:
        - Name: AWSManagedRulesCommonRuleSet
          Priority: 1
          OverrideAction:
            None: {}
          Statement:
            ManagedRuleGroupStatement:
              VendorName: AWS
              Name: AWSManagedRulesCommonRuleSet
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: CommonRuleSet
        - Name: AWSManagedRulesKnownBadInputsRuleSet
          Priority: 2
          OverrideAction:
            None: {}
          Statement:
            ManagedRuleGroupStatement:
              VendorName: AWS
              Name: AWSManagedRulesKnownBadInputsRuleSet
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: KnownBadInputs
        - Name: RateLimitRule
          Priority: 3
          Action:
            Block: {}
          Statement:
            RateBasedStatement:
              Limit: 2000
              AggregateKeyType: IP
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: RateLimit
        - Name: GeoBlockRule
          Priority: 4
          Action:
            Block: {}
          Statement:
            GeoMatchStatement:
              CountryCodes:
                - CN
                - RU
                - KP
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: GeoBlock

  # S3 Bucket for static content
  ContentBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'acro-edge-content-${AWS::AccountId}'
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  # CloudFront Origin Access Identity
  CloudFrontOAI:
    Type: AWS::CloudFront::OriginAccessIdentity
    Properties:
      OriginAccessIdentityConfig:
        Comment: ACRO Edge Guardian OAI

  # S3 Bucket Policy
  ContentBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref ContentBucket
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${CloudFrontOAI}'
            Action: s3:GetObject
            Resource: !Sub '${ContentBucket}/*'

  # CloudFront Distribution
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - Id: S3Origin
            DomainName: !GetAtt ContentBucket.RegionalDomainName
            S3OriginConfig:
              OriginAccessIdentity: !Sub 'origin-access-identity/cloudfront/${CloudFrontOAI}'
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods: [GET, HEAD, OPTIONS]
          CachedMethods: [GET, HEAD]
          ForwardedValues:
            QueryString: true
            Cookies:
              Forward: none
            Headers:
              - Authorization
              - CloudFront-Viewer-Country
          Compress: true
          DefaultTTL: 86400
          MaxTTL: 31536000
        Enabled: true
        Comment: ACRO Edge Guardian Distribution
        DefaultRootObject: index.html
        PriceClass: PriceClass_All
        HttpVersion: http2
        WebACLId: !GetAtt WebACL.Arn
        CustomErrorResponses:
          - ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: /index.html
            ErrorCachingMinTTL: 300
          - ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: /index.html
            ErrorCachingMinTTL: 300

  # Route 53 Hosted Zone (선택사항)
  Route53HostedZone:
    Type: AWS::Route53::HostedZone
    Condition: HasDomainName
    Properties:
      Name: !Ref DomainName
      HostedZoneConfig:
        Comment: ACRO Edge Guardian Domain

  # Route 53 Record (선택사항)
  Route53Record:
    Type: AWS::Route53::RecordSet
    Condition: HasDomainName
    Properties:
      HostedZoneId: !Ref Route53HostedZone
      Name: !Ref DomainName
      Type: A
      AliasTarget:
        DNSName: !GetAtt CloudFrontDistribution.DomainName
        HostedZoneId: Z2FDTNDATAQYW2

  # Lambda function for custom authentication
  AuthLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'ACRO-AuthLambdaRole-${AWS::StackName}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: CognitoAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - cognito-idp:*
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'

  AuthLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: ACRO-EdgeAuthFunction
      Runtime: python3.9
      Handler: index.lambda_handler
      Role: !GetAtt AuthLambdaRole.Arn
      Code:
        ZipFile: |
          import json
          import boto3
          import logging
          
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)
          
          cognito = boto3.client('cognito-idp')
          
          def lambda_handler(event, context):
              logger.info(f"Auth event: {json.dumps(event)}")
              
              try:
                  # CloudFront viewer request 처리
                  request = event['Records'][0]['cf']['request']
                  headers = request['headers']
                  
                  # Authorization 헤더 확인
                  auth_header = headers.get('authorization')
                  if not auth_header:
                      return {
                          'status': '401',
                          'statusDescription': 'Unauthorized',
                          'body': 'Authentication required'
                      }
                  
                  # JWT 토큰 검증 (간단한 예시)
                  token = auth_header[0]['value'].replace('Bearer ', '')
                  
                  # 실제 구현에서는 JWT 토큰을 검증해야 함
                  # 여기서는 간단한 예시로 처리
                  
                  logger.info("Authentication successful")
                  return request
                  
              except Exception as e:
                  logger.error(f"Authentication error: {str(e)}")
                  return {
                      'status': '403',
                      'statusDescription': 'Forbidden',
                      'body': 'Access denied'
                  }
      Environment:
        Variables:
          USER_POOL_ID: !Ref UserPool
          USER_POOL_CLIENT_ID: !Ref UserPoolClient

  # CloudWatch Alarms
  HighErrorRateAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: ACRO-HighErrorRate
      AlarmDescription: CloudFront error rate is too high
      MetricName: 4xxErrorRate
      Namespace: AWS/CloudFront
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 5
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: DistributionId
          Value: !Ref CloudFrontDistribution
      AlarmActions:
        - !Ref AlertTopic

  WAFBlockedRequestsAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: ACRO-WAF-BlockedRequests
      AlarmDescription: WAF is blocking many requests
      MetricName: BlockedRequests
      Namespace: AWS/WAFV2
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 2
      Threshold: 100
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: WebACL
          Value: !Ref WebACL
        - Name: Region
          Value: us-east-1  # CloudFront metrics are in us-east-1
      AlarmActions:
        - !Ref AlertTopic

  # SNS Topic for alerts
  AlertTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: ACRO-EdgeAlerts
      DisplayName: ACRO Edge Guardian Alerts

  # CloudWatch Dashboard
  EdgeDashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName: ACRO-Edge-Guardian-Dashboard
      DashboardBody: !Sub |
        {
          "widgets": [
            {
              "type": "metric",
              "x": 0,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/CloudFront", "Requests", "DistributionId", "${CloudFrontDistribution}" ],
                  [ ".", "BytesDownloaded", ".", "." ],
                  [ ".", "4xxErrorRate", ".", "." ],
                  [ ".", "5xxErrorRate", ".", "." ]
                ],
                "period": 300,
                "stat": "Sum",
                "region": "us-east-1",
                "title": "CloudFront Metrics"
              }
            },
            {
              "type": "metric",
              "x": 0,
              "y": 6,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/WAFV2", "AllowedRequests", "WebACL", "${WebACL}", "Region", "us-east-1" ],
                  [ ".", "BlockedRequests", ".", ".", ".", "." ]
                ],
                "period": 300,
                "stat": "Sum",
                "region": "us-east-1",
                "title": "WAF Metrics"
              }
            }
          ]
        }

Conditions:
  HasDomainName: !Not [!Equals [!Ref DomainName, ""]]

Outputs:
  UserPoolId:
    Description: Cognito User Pool ID
    Value: !Ref UserPool
    Export:
      Name: !Sub '${AWS::StackName}-UserPoolId'

  UserPoolClientId:
    Description: Cognito User Pool Client ID
    Value: !Ref UserPoolClient
    Export:
      Name: !Sub '${AWS::StackName}-UserPoolClientId'

  IdentityPoolId:
    Description: Cognito Identity Pool ID
    Value: !Ref IdentityPool
    Export:
      Name: !Sub '${AWS::StackName}-IdentityPoolId'

  CloudFrontURL:
    Description: CloudFront Distribution URL
    Value: !Sub 'https://${CloudFrontDistribution.DomainName}'
    Export:
      Name: !Sub '${AWS::StackName}-CloudFrontURL'

  WebACLArn:
    Description: WAF Web ACL ARN
    Value: !GetAtt WebACL.Arn
    Export:
      Name: !Sub '${AWS::StackName}-WebACL'

  DomainName:
    Condition: HasDomainName
    Description: Custom Domain Name
    Value: !Ref DomainName
    Export:
      Name: !Sub '${AWS::StackName}-DomainName'

  DashboardURL:
    Description: CloudWatch Dashboard URL
    Value: !Sub 'https://us-east-1.console.aws.amazon.com/cloudwatch/home?region=us-east-1#dashboards:name=ACRO-Edge-Guardian-Dashboard'
    Export:
      Name: !Sub '${AWS::StackName}-Dashboard'

  S3BucketName:
    Description: Content S3 Bucket Name
    Value: !Ref ContentBucket
    Export:
      Name: !Sub '${AWS::StackName}-ContentBucket'