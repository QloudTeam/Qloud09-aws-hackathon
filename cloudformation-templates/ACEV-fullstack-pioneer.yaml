AWSTemplateFormatVersion: '2010-09-09'
Description: 'ACEV - 풀스택 개척자: EC2 + S3 + CloudFront 모던 웹앱'

Parameters:
  KeyPairName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: EC2 키페어

Resources:
  # S3 버킷 (프론트엔드)
  FrontendBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'acev-frontend-${AWS::AccountId}'
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false

  # S3 버킷 정책 (CloudFront 접근용)
  FrontendBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref FrontendBucket
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${CloudFrontOAI}'
            Action: s3:GetObject
            Resource: !Sub '${FrontendBucket}/*'

  # S3 버킷 (자산 저장용)
  AssetsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'acev-assets-${AWS::AccountId}'
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders: ['*']
            AllowedMethods: [GET, PUT, POST, DELETE, HEAD]
            AllowedOrigins: ['*']
            MaxAge: 3000

  # CloudFront Origin Access Identity
  CloudFrontOAI:
    Type: AWS::CloudFront::OriginAccessIdentity
    Properties:
      OriginAccessIdentityConfig:
        Comment: ACEV Frontend OAI

  # CloudFront Distribution
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - Id: S3Origin
            DomainName: !GetAtt FrontendBucket.RegionalDomainName
            S3OriginConfig:
              OriginAccessIdentity: !Sub 'origin-access-identity/cloudfront/${CloudFrontOAI}'
          - Id: APIOrigin
            DomainName: !GetAtt BackendServer.PublicDnsName
            CustomOriginConfig:
              HTTPPort: 80
              HTTPSPort: 443
              OriginProtocolPolicy: http-only
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods: [GET, HEAD]
          CachedMethods: [GET, HEAD]
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
          Compress: true
        CacheBehaviors:
          - PathPattern: '/api/*'
            TargetOriginId: APIOrigin
            ViewerProtocolPolicy: https-only
            AllowedMethods: [GET, HEAD, OPTIONS, PUT, POST, PATCH, DELETE]
            CachedMethods: [GET, HEAD]
            ForwardedValues:
              QueryString: true
              Headers: [Authorization, Content-Type]
              Cookies:
                Forward: none
            TTL: 0
        Enabled: true
        Comment: ACEV Fullstack Web Application
        DefaultRootObject: index.html
        CustomErrorResponses:
          - ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: /index.html
            ErrorCachingMinTTL: 300

  # VPC for Backend
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: ACEV-VPC

  # Public Subnet
  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: ACEV-Public-Subnet

  # Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: ACEV-IGW

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # Route Table
  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: ACEV-RouteTable

  Route:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  SubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref RouteTable

  # Security Group for Backend
  BackendSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Backend Server Security Group
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: ACEV-Backend-SG

  # IAM Role for Backend Server
  BackendRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                  - s3:ListBucket
                Resource:
                  - !Sub '${AssetsBucket}/*'
                  - !GetAtt AssetsBucket.Arn
                  - !Sub '${FrontendBucket}/*'
                  - !GetAtt FrontendBucket.Arn

  BackendInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref BackendRole

  # Backend Server (EC2)
  BackendServer:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0c02fb55956c7d316
      InstanceType: t3.micro
      KeyName: !Ref KeyPairName
      SubnetId: !Ref PublicSubnet
      SecurityGroupIds:
        - !Ref BackendSecurityGroup
      IamInstanceProfile: !Ref BackendInstanceProfile
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          yum install -y nodejs npm git httpd
          
          # Node.js 애플리케이션 설정
          mkdir -p /opt/acev-backend
          cd /opt/acev-backend
          
          # 간단한 Express.js API 서버 생성
          cat > package.json << 'EOF'
          {
            "name": "acev-backend",
            "version": "1.0.0",
            "description": "ACEV Fullstack Backend",
            "main": "server.js",
            "scripts": {
              "start": "node server.js"
            },
            "dependencies": {
              "express": "^4.18.0",
              "cors": "^2.8.5",
              "aws-sdk": "^2.1000.0"
            }
          }
          EOF
          
          cat > server.js << 'EOF'
          const express = require('express');
          const cors = require('cors');
          const AWS = require('aws-sdk');
          
          const app = express();
          const port = 3000;
          
          app.use(cors());
          app.use(express.json());
          
          const s3 = new AWS.S3();
          
          // Health check
          app.get('/api/health', (req, res) => {
            res.json({ status: 'OK', timestamp: new Date().toISOString() });
          });
          
          // API endpoints
          app.get('/api/data', (req, res) => {
            res.json({ 
              message: 'ACEV Fullstack API',
              data: [
                { id: 1, name: 'Frontend', technology: 'React' },
                { id: 2, name: 'Backend', technology: 'Node.js' },
                { id: 3, name: 'Storage', technology: 'S3' }
              ]
            });
          });
          
          app.post('/api/upload', (req, res) => {
            // S3 업로드 로직 (예시)
            res.json({ message: 'File uploaded successfully' });
          });
          
          app.listen(port, () => {
            console.log(`ACEV Backend server running on port ${port}`);
          });
          EOF
          
          # 의존성 설치 및 서버 시작
          npm install
          
          # PM2로 프로세스 관리
          npm install -g pm2
          pm2 start server.js --name acev-backend
          pm2 startup
          pm2 save
          
          # Apache 프록시 설정
          systemctl start httpd
          systemctl enable httpd
          
          cat > /etc/httpd/conf.d/acev-proxy.conf << 'EOF'
          <VirtualHost *:80>
              ProxyPreserveHost On
              ProxyRequests Off
              
              # API 요청을 Node.js로 프록시
              ProxyPass /api/ http://localhost:3000/api/
              ProxyPassReverse /api/ http://localhost:3000/api/
              
              # 기본 응답
              DocumentRoot /var/www/html
              <Location />
                  Order allow,deny
                  Allow from all
              </Location>
          </VirtualHost>
          EOF
          
          systemctl restart httpd
          
          # 프론트엔드 빌드 및 배포 스크립트 생성
          cat > /opt/deploy-frontend.sh << 'EOF'
          #!/bin/bash
          # 프론트엔드 배포 스크립트
          echo "Frontend deployment script ready"
          # aws s3 sync ./build s3://${FrontendBucket} --delete
          EOF
          chmod +x /opt/deploy-frontend.sh
      Tags:
        - Key: Name
          Value: ACEV-Backend-Server

  # CloudWatch Log Group
  BackendLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /acev/backend
      RetentionInDays: 14

Outputs:
  CloudFrontURL:
    Description: CloudFront Distribution URL
    Value: !Sub 'https://${CloudFrontDistribution.DomainName}'
    Export:
      Name: !Sub '${AWS::StackName}-CloudFrontURL'

  BackendServerIP:
    Description: Backend Server Public IP
    Value: !GetAtt BackendServer.PublicIp
    Export:
      Name: !Sub '${AWS::StackName}-BackendIP'

  FrontendBucket:
    Description: Frontend S3 Bucket
    Value: !Ref FrontendBucket
    Export:
      Name: !Sub '${AWS::StackName}-FrontendBucket'

  AssetsBucket:
    Description: Assets S3 Bucket
    Value: !Ref AssetsBucket
    Export:
      Name: !Sub '${AWS::StackName}-AssetsBucket'

  APIEndpoint:
    Description: Backend API Endpoint
    Value: !Sub 'http://${BackendServer.PublicDnsName}/api'
    Export:
      Name: !Sub '${AWS::StackName}-APIEndpoint'